#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('generator:server');
var http = require('http');
/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '4000');
app.set('port', port);
/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */
function wakeUpDyno(dynoURL,intervalMinutes=25,callback){
  let date=new Date();
  const day=date.getDay()
  const hour=date.getHours();
    
  //get minutes for timer
  const minutes=intervalMinutes*60000;
  setTimeout(()=>{
      try{
          if(day==6||day==7) return console.log('wrong day to wake,skipping HTTP.get');
          if(hour<8&&hour>4) return console.log('wrong hour to try');
          
         http.get(dynoURL,()=>{
              console.log('Making a HTTP request to ',dynoURL)
          })
      }
      catch{
          console.log('error fetching',dynoURL)
      }
      finally{
          try{
              callback();
          }
          catch(e){
              callback?console.log('callback failed',e.message):null
          }
          finally{
              console.log('finally')
              return wakeUpDyno(dynoURL,intervalMinutes,callback)
          }
      }
  },minutes)
}

let websites=["http://brainapp.kevintaulman.com/","http://flavortown.herokuapp.com"]

server.listen(port,()=>{
  return websites.forEach(website=>wakeUpDyno(website))
});
server.on('error', onError);
server.on('listening', onListening);


/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
